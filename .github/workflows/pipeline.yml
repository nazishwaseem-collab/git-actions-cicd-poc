name: Build, Upload, Policy Management, Deploy and Rollback Mule App

on:
  push:
    branches:
      - 'develop'      # dev environment
      - 'release/**'   # uat environment
      - 'master'       # prod environment
  workflow_dispatch:

env:
  JAVA_VERSION: '17'																																	 

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ startsWith(github.ref, 'refs/heads/release/') && 'uat' || (github.ref == 'refs/heads/master' && 'prod' || 'dev') }}
    env:
      TARGET_ENV: ${{ startsWith(github.ref, 'refs/heads/release/') && 'uat' || (github.ref == 'refs/heads/master' && 'prod' || 'dev') }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      # Give this run a unique version so Exchange doesn't reject duplicates
      - name: Set CI version (unique per run)
        run: |
          BASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          NEW_VERSION="${BASE_VERSION}-${GITHUB_RUN_NUMBER}"
          mvn -B versions:set -DnewVersion="${NEW_VERSION}" -DgenerateBackupPoms=false
          echo "Using version: ${NEW_VERSION}"
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

      - name: Print effective-settings (optional)
        run: mvn -B help:effective-settings -s .maven/settings.xml

      # Build but skip MUnit tests here
      - name: Build with Maven
        run: mvn -B clean package -s .maven/settings.xml -DskipMunitTests -Denv=${{ env.TARGET_ENV }} -Dclient.id="${{ secrets.CONNECTED_APP_CLIENT_ID }}" -Dclient.secret="${{ secrets.CONNECTED_APP_CLIENT_SECRET }}" -Ddecryption.key="${{ secrets.DECRYPTION_KEY }}"

      - name: Stamp artifact file name with commit hash
        shell: bash
        run: |
          artifactName1=$(ls target/*.jar | head -1)
          commitHash=$(git rev-parse --short "$GITHUB_SHA")
          artifactName2="${artifactName1%.jar}-$commitHash.jar"
          mv "$artifactName1" "$artifactName2"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mule-artifact
          path: target/*.jar
          if-no-files-found: error
          retention-days: 7

  # Uncomment when Nexus credentials are available
  # test:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   environment: ${{ startsWith(github.ref, 'refs/heads/release/') && 'uat' || (github.ref == 'refs/heads/master' && 'prod' || 'dev') }}
  #   env:
  #     TARGET_ENV: ${{ startsWith(github.ref, 'refs/heads/release/') && 'uat' || (github.ref == 'refs/heads/master' && 'prod' || 'dev') }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/cache@v4
  #       with:
  #         path: ~/.m2/repository
  #         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
  #     - uses: actions/setup-java@v4
  #       with:
  #         java-version: ${{ env.JAVA_VERSION }}
  #         distribution: 'temurin'
  #     - name: Run MUnit Tests
  #       run: mvn -B clean test -s .maven/settings.xml \
  #         -DmuleVersion=4.9.0 -Dmunit.runtime.version=4.9.0 \
  #         -Denv=${{ env.TARGET_ENV }} \
  #         -Dclient.id="${{ secrets.CONNECTED_APP_CLIENT_ID }}" \
  #         -Dclient.secret="${{ secrets.CONNECTED_APP_CLIENT_SECRET }}"
  #     - name: Upload MUnit Reports
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: munit-reports
  #         path: target/munit-reports/**
  #         if-no-files-found: warn
  #         retention-days: 7

  upload:
    needs: [build]  # add 'test' later when enabled
    runs-on: ubuntu-latest
    environment: ${{ startsWith(github.ref, 'refs/heads/release/') && 'uat' || (github.ref == 'refs/heads/master' && 'prod' || 'dev') }}
    env:
      TARGET_ENV: ${{ startsWith(github.ref, 'refs/heads/release/') && 'uat' || (github.ref == 'refs/heads/master' && 'prod' || 'dev') }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - uses: actions/download-artifact@v4
        with:
          name: mule-artifact
          path: .

      # Ensure the same unique version is set in this job too (matches build job)
      - name: Set CI version (unique per run)
        run: |
          mvn -B versions:set -DnewVersion="${NEW_VERSION}" -DgenerateBackupPoms=false
          echo "Using version: ${NEW_VERSION}"

      - name: Upload to Exchange (Nexus/Anypoint)
        run: mvn -B deploy -s .maven/settings.xml -DskipMunitTests -Denv=${{ env.TARGET_ENV }} -Dclient.id="${{ secrets.CONNECTED_APP_CLIENT_ID }}" -Dclient.secret="${{ secrets.CONNECTED_APP_CLIENT_SECRET }}" -Ddecryption.key="${{ secrets.DECRYPTION_KEY }}"

  policy-management:
    needs: upload
    runs-on: ubuntu-latest
    environment: ${{ startsWith(github.ref, 'refs/heads/release/') && 'uat' || (github.ref == 'refs/heads/master' && 'prod' || 'dev') }}
    env:
      TARGET_ENV: ${{ startsWith(github.ref, 'refs/heads/release/') && 'uat' || (github.ref == 'refs/heads/master' && 'prod' || 'dev') }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Anypoint CLI
        run: npm install -g anypoint-cli-v4

      - name: Extract API Name & Version from pom.xml
        run: |
          API_NAME=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
          API_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "API_NAME=$API_NAME" >> $GITHUB_ENV
          echo "API_VERSION=$API_VERSION" >> $GITHUB_ENV

      - name: Apply Client ID Enforcement Policy
        run: |
          echo "Applying Client ID Enforcement policy to $API_NAME version $API_VERSION in env ${{ env.TARGET_ENV }}"
          anypoint-cli-v4 apis apply-policy --client-id "${{ secrets.CONNECTED_APP_CLIENT_ID }}" --client-secret "${{ secrets.CONNECTED_APP_CLIENT_SECRET }}" --org "${{ secrets.ORG_ID }}" --env ${{ env.TARGET_ENV }} --api-name "${API_NAME}" --api-version "${API_VERSION}" --policy client-id-enforcement --policy-parameters '{"credentialsOrigin":"HTTP_BASIC_AUTHORIZATION_HEADER"}'

  deploy:
    needs: policy-management
    runs-on: ubuntu-latest
    environment: ${{ startsWith(github.ref, 'refs/heads/release/') && 'uat' || (github.ref == 'refs/heads/master' && 'prod' || 'dev') }}
    env:
      TARGET_ENV: ${{ startsWith(github.ref, 'refs/heads/release/') && 'uat' || (github.ref == 'refs/heads/master' && 'prod' || 'dev') }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
      - uses: actions/download-artifact@v4
        with:
          name: mule-artifact
          path: .

      # Ensure the same unique version is set here too
      - name: Set CI version (unique per run)
        run: |
          mvn -B versions:set -DnewVersion="${NEW_VERSION}" -DgenerateBackupPoms=false
          echo "Using version: ${NEW_VERSION}"

      - name: Deploy to CloudHub 2.0
        run: mvn -B deploy -s .maven/settings.xml -DmuleDeploy -DskipMunitTests -Denv=${{ env.TARGET_ENV }} -Dclient.id="${{ secrets.CONNECTED_APP_CLIENT_ID }}" -Dclient.secret="${{ secrets.CONNECTED_APP_CLIENT_SECRET }}" -Ddecryption.key="${{ secrets.DECRYPTION_KEY }}"
      - name: Save version for rollback
        if: success()
        run: echo "${NEW_VERSION}" > .last_version.txt
      - uses: actions/upload-artifact@v4
        if: success()
        with:
          name: last-successful-version
          path: .last_version.txt

  rollback:
    needs: deploy
    if: failure()
    runs-on: ubuntu-latest
    environment: ${{ startsWith(github.ref, 'refs/heads/release/') && 'uat' || (github.ref == 'refs/heads/master' && 'prod' || 'dev') }}
    env:
      TARGET_ENV: ${{ startsWith(github.ref, 'refs/heads/release/') && 'uat' || (github.ref == 'refs/heads/master' && 'prod' || 'dev') }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: last-successful-version
          path: .
      - name: Rollback to Previous Version
        run: |
          PREVIOUS_VERSION=$(cat .last_version.txt)
          echo "Rolling back to version $PREVIOUS_VERSION in env ${{ env.TARGET_ENV }}"
          mvn -B mule:deploy -s .maven/settings.xml -DmuleDeploy -Denv=${{ env.TARGET_ENV }} -Dapplication.version=$PREVIOUS_VERSION  -Dclient.id="${{ secrets.CONNECTED_APP_CLIENT_ID }}" -Dclient.secret="${{ secrets.CONNECTED_APP_CLIENT_SECRET }}" -Ddecryption.key="${{ secrets.DECRYPTION_KEY }}"
